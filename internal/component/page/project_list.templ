package page

import "github.com/solsteace/misite/internal/entity"
import "fmt"
import "strconv"
import "strings"
import "github.com/solsteace/misite/internal/component/utility"

func mapIntToString(ints []int, prefix string) []string {
    var sInts []string
    for _, i := range ints {
        sInt := fmt.Sprintf("%s%s", prefix, strconv.Itoa(i))
        sInts = append(sInts, sInt)
    }
    return sInts
}

templ ProjectList(project []entity.ProjectList, topTags []int) {
    <div class="lyt__1x2 lyt__1x2--1-3 exploration">
        <div class="exploration__tools"> 
            <section> SEARCH FUNCTIONALITY HERE </section>
            <section>
                <b class="u__h u__h--4"> # </b>
                <nav 
                    class="projects__tags"
                    hx-get={fmt.Sprintf(
                        "/tags?by=project&%s", 
                        strings.Join(mapIntToString(topTags, "tagId="), "&"))}
                    hx-trigger="load"
                    hx-replace-url="false"
                    hx-push-url="false"
                    hx-swap="innerHTML"
                > <p> Loading... </p> </nav>
            </section>
        </div>

        <div
            hx-target="#page"
            hx-swap="innerHTML"
            class="cmp__list"
        > 
            for idx, p := range project {
                <div 
                    class="lyt__1x2 lyt__1x2--1-3 exploration__entry"
                    hx-trigger="click"
                    hx-get={fmt.Sprintf("/project/%d", p.Id)}
                >
                    <div class="cmp__image exploration__entry-thumbnail">
                        <img src={p.Thumbnail}>
                    </div>
                    <div class="exploration__entry-detail">
                        <div class="exploration__entry-aside u__dim">
                            if p.Serie != nil {
                                <p> Featured in </p>
                                <a 
                                    class="articles-entry__serie-link"
                                    href={fmt.Sprintf("/serie/%d", p.Serie.Id)}
                                    hx-trigger="click consume"
                                    hx-get={fmt.Sprintf("/serie/%d", p.Serie.Id)}
                                    hx-target="#page"
                                    hx-swap="innerHTML"
                                    hx-replace-url="true"
                                    hx-push-url="true"
                                > {p.Serie.Name} </a> 
                            }
                        </div>

                        <div>
                            <p class="u__h u__h--4"> {p.Name} </p>
                            <div class="cmp__teaser">
                                <p> {p.Synopsis} </p>
                            </div>
                        </div>

                        if len(p.Tag) > 0 {
                            <section>
                                <ul class="cmp__badge-list tag-badge-list">
                                    for _, t := range p.Tag {
                                        <li> 
                                            <a
                                                class="cmp__badge-list tag-badge-list__tag"
                                                hx-trigger="click consume"
                                                hx-target="#page"
                                                hx-get={fmt.Sprintf("%s?tagId=%d", utility.ExploreProjectUrl, t.Id)}
                                                href= {fmt.Sprintf("%s?tagId=%d", utility.ExploreProjectUrl, t.Id)} 
                                            >
                                                {t.Name}
                                            </a> 
                                        </li>
                                    }
                                </ul>
                            </section>
                        }
                    </div>
                </div>

                if idx < len(project) - 1 {
                    <div class="cmp__list-delimiter"> </div>
                }
            }
        </div>
    </div>
}